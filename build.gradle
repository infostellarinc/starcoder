/*
 * Starcoder - a server to read/write data from/to the stars, written in Go.
 * Copyright (C) 2018 InfoStellar, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */



import com.google.common.io.CharStreams
import com.google.common.io.LineProcessor
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
        gradlePluginPortal()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'http://dl.bintray.com/curioswitch/curiostack'
        }
        maven {
            url 'http://palantir.bintray.com/releases'
        }
        mavenLocal()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:3.3.0'
        classpath 'gradle.plugin.com.github.blindpirate:gogradle:0.10.2'
        classpath 'org.curioswitch.curiostack:gradle-curiostack-plugin:0.0.127'
    }
}

apply plugin: 'org.curioswitch.gradle-curiostack-plugin'
apply plugin: 'org.curioswitch.gradle-grpc-api-plugin'
apply plugin: 'com.github.blindpirate.gogradle'

def GO_VERSION = '1.11'

golang {
    goVersion = GO_VERSION
    packagePath = 'github.com/infostellarinc/starcoder'
}

def gopath = System.env['GOPATH'] ?: project.file("${gradle.gradleUserHomeDir}/go/gopath").toString()

protobuf {
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                gofast {
                    option 'plugins=grpc'
                    option 'Mgoogle/protobuf/duration.proto=github.com/gogo/protobuf/types'
                    option 'Mgoogle/protobuf/timestamp.proto=github.com/gogo/protobuf/types'
                    // Output into root directory for gogradle
                    outputSubDir = '../../../../..'
                }
            }
        }
    }
    plugins {
        gofast {
            path = project.file("${gopath}/bin/protoc-gen-gofast")
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'api'
        }
    }
}

task deleteGeneratedFiles(type: Delete) {
    delete fileTree(project.projectDir) {
        include '**/*.pb.go'
        include '**/*.mock.go'
        include '**/rice-box.go'
    }
    delete '.gogradle'
}
tasks.clean.dependsOn deleteGeneratedFiles

gcloud {
    clusterBaseName = 'infostellar-starcoder'
    cloudRegion = 'asia-northeast1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
    distributionType = 'ALL'
}

// protobuf-gradle-plugin always apply Java plugin, but we don't need it.
tasks.compileJava.enabled = false
tasks.compileTestJava.enabled = false

license {
    header file('LICENSE.header')
    mapping {
        proto = 'SLASHSTAR_STYLE'
    }
}

def arch = 'linux-amd64'
if (Os.isFamily(Os.FAMILY_MAC)) {
    arch = 'darwin-amd64'
} else if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    arch = 'windows-amd64'
}

ext.gnuradioRoot = gradle.gradleUserHomeDir.toPath().resolve('curiostack/python/bootstrap/miniconda2-gnuradio')

def condaCommand(command) {
    return """
    . ${gnuradioRoot.resolve('etc/profile.d/conda.sh')} && \\
    conda activate > /dev/null && \\
    ${command}
    """
}

goBuild {
    run "bash -c '${condaCommand('$GOROOT/bin/go build -o build/out/starcoder')}'"

    environment 'PKG_CONFIG_PATH', "${gnuradioRoot}/lib/pkgconfig"

    environment 'CPLUS_INCLUDE_PATH', "${gnuradioRoot}/include"
}

task installProtocGoPlugin(type: com.github.blindpirate.gogradle.Go) {
    go 'get github.com/gogo/protobuf/protoc-gen-gofast@v1.1.1'
}
tasks.goVendor.dependsOn installProtocGoPlugin

task installRice(type: com.github.blindpirate.gogradle.Go) {
    go 'get github.com/GeertJohan/go.rice/rice@c02ca9a983da5807ddf7d796784928f5be4afd09'
}
tasks.goVendor.dependsOn installRice

task useRice(type:Exec) {
    dependsOn installRice
    inputs.dir 'flowgraphs'
    outputs.file 'cmd/rice-box.go'

    workingDir project.file('cmd').toString()
    commandLine project.file("${gopath}/bin/rice").toString(), 'embed-go'
}

tasks.goBuild.dependsOn useRice

afterEvaluate {
    tasks.generateProto.dependsOn installProtocGoPlugin
    tasks.goVendor.dependsOn tasks.generateProto

    tasks.withType(com.github.blindpirate.gogradle.Go) {
        it.environment 'GOPATH', gopath
        if (it.name.startsWith('build')) {
            dependsOn tasks.goVendor
        }
    }
    [tasks.goBuild, tasks.goTest].each {
        it.environment 'PATH', "${org.curioswitch.gradle.plugins.shared.CommandUtil.getCondaBaseDir(project)}/bin:${System.getenv('PATH')}"
    }
}

// We use go modules for dependency management, so disable all of gogradle's
tasks.installDependencies.enabled = false
tasks.resolveBuildDependencies.enabled = false
tasks.resolveTestDependencies.enabled = false

tasks.build.dependsOn tasks.goBuild

envs {
    conda 'miniconda2-gnuradio', 'Miniconda2-4.4.10', [
            condaPackage('autoconf'),
            condaPackage('automake'),
            condaPackage('boost'),
            condaPackage('cmake'),
            condaPackage('gcc_linux-64'),
            condaPackage('gfortran_linux-64'),
            condaPackage('gxx_linux-64'),
            condaPackage('git'),
            condaPackage('gsl'),
            condaPackage('libtool'),
            condaPackage('llvm'),
            condaPackage('make'),
            condaPackage('numpy'),
            condaPackage('pkg-config'),
            condaPackage('protobuf'),
            condaPackage('subprocess32'),
            condaPackage('swig'),
            condaPackage('wget'),
            condaPackage('libpng'),
    ]
}

// We install pip packages after a first conda bootstrap so its build tools are available to compile
// native extensions.
task installPipPackages(type: Exec) {
    dependsOn 'pythonSetup'

    executable 'bash'
    // Python setuptools uses LDSHARED variable and ignores CC when linking.
    args '-c', condaCommand('LDSHARED=$CC pip install cheetah lxml mako matplotlib pybombs requests ruamel.yaml==0.15.51')
}

task setupPrefix(type: Exec) {
    onlyIf { !project.file("${gnuradioRoot}/lib/libgnuradio-blocks.so").exists() }

    dependsOn 'installPipPackages'
    executable 'bash'
    args '-c', condaCommand("""pybombs auto-config && \\
        pybombs -y recipes add-defaults && \\
        pybombs -y recipes add gr-starcoder ${project.file('gr-recipes')} && \\
        pybombs -y -v prefix init ${gnuradioRoot} -a gnuradio -R gnuradio-nogui && \\
        ${gnuradioRoot}/lib/uhd/utils/uhd_images_downloader.py
    """)
    // For some reason, cmake has trouble finding boost in certain situations.
    environment 'BOOST_ROOT', gnuradioRoot

    environment 'PKG_CONFIG_PATH', "${gnuradioRoot}/lib/pkgconfig"

    doFirst {
        // Trick cmake into thinking pygtk exists to allow normal grc installation. We don't actually
        // use gtk so this shouldn't cause problems.
        copy {
            from project.file('mockpygtk')
            into "${gnuradioRoot}/lib/python2.7/site-packages/gtk"
        }
    }

    doLast {
        delete "${gnuradioRoot}/pkgs"
        delete "${gnuradioRoot}/src"
    }

    if (System.getenv('CI')) {
        def stdOutPipedInput = new PipedInputStream()
        def stdOutPipedOutput = new PipedOutputStream(stdOutPipedInput)

        def readerThread = Thread.startDaemon {
            def standardLogPrefixes = ['Cloning', 'Configuring', 'Building', 'Installing']

            def previousLogPrefix = ''

            def reader = new BufferedReader(new InputStreamReader(stdOutPipedInput))
            CharStreams.readLines(reader, new LineProcessor<Void>() {
                @Override
                boolean processLine(String line) throws IOException {
                    // Don't print empty lines
                    if (line.trim() == '') {
                        return true
                    }

                    // Don't spam with percentages.
                    if (line.contains("%")) {
                        return true
                    }

                    // Only print cmake logs once per type
                    for (logPrefix in standardLogPrefixes) {
                        if (line.startsWith(logPrefix)) {
                            if (previousLogPrefix == logPrefix) {
                                return true
                            }
                            previousLogPrefix = logPrefix
                            break
                        }
                    }

                    println line
                    return true
                }

                @Override
                Void getResult() {
                    return null
                }
            })
        }

        standardOutput = stdOutPipedOutput
    }
}

task installGrStarcoder(type: Exec) {
    dependsOn setupPrefix
    executable 'bash'
    args '-c', condaCommand("""cmake ../../gr-starcoder -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=${gnuradioRoot} -Wno-dev && \\
        make &&
        make install
    """)

    workingDir project.file('build/starcoder-cmake')
    doFirst {
        project.file('build/starcoder-cmake').mkdirs()
    }

    environment 'PKG_CONFIG_PATH', "${gnuradioRoot}/lib/pkgconfig"
}

task installStarcoder(type: Copy) {
    dependsOn build
    from 'build/out'
    into "${gnuradioRoot}/bin"
}

task install {
    dependsOn installGrStarcoder, installStarcoder
}

task clangFormat(type: Exec) {
    dependsOn 'pythonSetup'
    executable 'bash'
    def ccFiles = fileTree('.').filter { it.isFile() && it.name.endsWith('.cc') }.files.path.join(' ')
    def hIncFiles = fileTree('./gr-starcoder/include').filter { it.isFile() && it.name.endsWith('.h') }.files.path.join(' ')
    def hLibFiles = fileTree('./gr-starcoder/lib').filter { it.isFile() && it.name.endsWith('.h') }.files.path.join(' ')

    args '-c', condaCommand("clang-format -style=Google -i ${ccFiles} ${hIncFiles} ${hLibFiles}")
}

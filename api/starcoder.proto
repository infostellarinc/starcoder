/*
 * Starcoder - a server to read/write data from/to the stars, written in Go.
 * Copyright (C) 2018 InfoStellar, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto3";

package starcoder;

option go_package = "/api";

// The GNURadio process manager service definition.
service ProcessManager {
  // Create a process
  rpc StartFlowgraph (StartFlowgraphRequest) returns (StartFlowgraphResponse) {}

  // End a process
  rpc EndFlowgraph (EndFlowgraphRequest) returns (EndFlowgraphResponse) {}
}

// Complex number
message Complex {
  // Real part of the complex number
  double real_value = 1;

  // Imaginary part of the complex number
  double imaginary_value = 2;
}

// GNURadio parameter values
message Value {
  oneof val {
    // Represents a string value
    string string_value = 1;

    // Represents an integer
    int32 integer_value = 2;

    // Represents a long integer
    int64 long_value = 3;

    // Represents a float
    double float_value = 4;

    // Represents a complex number
    Complex complex_value = 5;
  }
}

// The request message containing parameters for starting a flowgraph
message StartFlowgraphRequest {
  // Filename of GNURadio script to run
  string filename = 1;

  // Key value pair representing a parameter to be passed to the script
  message Parameter {
    // Name of parameter
    string key = 1;

    // Value to assign the parameter
    Value value = 2;
  }

  // Arbitrary command line parameters to be passed to the GNURadio script
  repeated Parameter parameters = 2;
}

// The message response to a StartFlowgraphRequest
message StartFlowgraphResponse {
  // Unique Process ID of the flowgraph that was started
  string processId = 1;

  // Response status
  enum Status {
    // Successfully started flowgraph.
    SUCCESS = 0;

    // File access problem
    FILE_ACCESS_ERROR = 1;

    // Unsupported file type
    UNSUPPORTED_FILE_TYPE = 2;

    // .grc compile error
    GRC_COMPILE_ERROR = 3;

    // Python file run error
    PYTHON_RUN_ERROR = 4;

    // Unknown error starting flowgraph.
    UNKNOWN_ERROR = 255;
  }

  // Response status
  Status status = 2;

  // Error message
  string error = 3;
}

// The request message containing parameters for ending a flowgraph
message EndFlowgraphRequest {
  // Process ID of process to end
  string processId = 1;
}

// The message response to an EndFlowgraphRequest
message EndFlowgraphResponse {
  // Response status
  enum Status {
    // Successfully ended flowgraph.
    SUCCESS = 0;

    // Invalid Process Id
    INVALID_PROCESS_ID = 1;

    // Flowgraph has exited
    PROCESS_EXITED = 2;

    // Python file run error
    PYTHON_RUN_ERROR = 3;

    // Unknown error ending flowgraph.
    UNKNOWN_ERROR = 255;
  }

  // Response status
  Status status = 1;

  // Error message
  string error = 2;
}

/*
 * Starcoder - a server to read/write data from/to the stars, written in Go.
 * Copyright (C) 2018 InfoStellar, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto3";

package starcoder;

option go_package = "/api";

// Request to run a flowgraph. Can be StartFlowgraphRequest for flowgraph
// starting parameters or SendCommandRequest to send commands dynamically
// while flowgraph is running.
message RunFlowgraphRequest {
  oneof Request {
    StartFlowgraphRequest startFlowgraphRequest = 1;
    SendCommandRequest sendCommandRequest = 2;
  }
}

// Request to start a flowgraph. This is the first request sent in a stream.
message StartFlowgraphRequest {
  // Filename of GNURadio script to run
  string filename = 1;

  // Key value pair representing a parameter to be passed to the script
  message Parameter {
    // Name of parameter
    string key = 1;

    // Value to assign the parameter
    Value value = 2;
  }

  // Arbitrary command line parameters to be passed to the GNURadio script
  repeated Parameter parameters = 2;

  // Blocks to stream back in the response
  repeated string block_id = 3;
}

// Command message sent to the flowgraph. This currently only works for the Starcoder 
// command_source block which will forward the messages as is to any other 
// block it is connected to.
message SendCommandRequest {
  // Block ID to send the command message to.
  string block_id = 1;

  // Will be sent to the message passing port of the command_source block with
  // id block_id.
  PmtMessage pmt = 2;
}

// A GNURadio PMT (Polymorphic Message Type)
message PmtMessage {
  oneof pmt_oneof {
    bool boolean_value = 1;

    string symbol_value = 2;

    int64 integer_value = 3;

    double double_value = 4;

    Complex complex_value = 5;

    Pair pair_value = 6;

    Tuple tuple_value = 7;

    Vector vector_value = 8;

    UniformVector uniform_vector_value = 9;

    Dict dict_value = 10;
  }
}

// A PMT pair. The `car` and `cdr` variable names are defined by
// GNURadio.
message Pair {
  // First object of the pair
  PmtMessage car = 1;

  // Second object of the pair
  PmtMessage cdr = 2;
}

// A PMT tuple.
message Tuple {
  repeated PmtMessage pmt = 1;
}

// A PMT dictionary.
message Dict {
  // Key value pair representing entry in PMT dictionary
  message Entry {
    // Key
    PmtMessage key = 1;

    // Value assigned to key
    PmtMessage value = 2;
  }

  repeated Entry entries = 1;
}

// A PMT Vector
message Vector {
  repeated PmtMessage pmt = 1;
}

// A PMT Uniform Vector
message UniformVector {
  oneof pmt_uniform_vector_oneof {
    bytes u8_value = 1;

    I8Vector i8_value = 2;

    U16Vector u16_value = 3;

    I16Vector i16_value = 4;

    U32Vector u32_value = 5;

    I32Vector i32_value = 6;

    U64Vector u64_value = 7;

    I64Vector i64_value = 8;

    F32Vector f32_value = 9;

    F64Vector f64_value = 10;

    C32Vector c32_value = 11;

    C64Vector c64_value = 12;
  }
}

// A PMT Uint8 Vector
message U8Vector {
  bytes value = 1;
}

// A PMT Int8 Vector
message I8Vector {
  repeated sint32 value = 1;
}

// A PMT Uint16 Vector
message U16Vector {
  repeated uint32 value = 1;
}

// A PMT Int16 Vector
message I16Vector {
  repeated sint32 value = 1;
}

// A PMT Uint32 Vector
message U32Vector {
  repeated uint32 value = 1;
}

// A PMT Int32 Vector
message I32Vector {
  repeated sint32 value = 1;
}

// A PMT Uint64 Vector
message U64Vector {
  repeated uint64 value = 1;
}

// A PMT Int64 Vector
message I64Vector {
  repeated sint64 value = 1;
}

// A PMT Float32 Vector
message F32Vector {
  repeated float value = 1;
}

// A PMT Float64 Vector
message F64Vector {
  repeated double value = 1;
}

// A PMT Complex32 Vector
message C32Vector {
  repeated Complex32 value = 1;
}

// A PMT Complex64 Vector
message C64Vector {
  repeated Complex value = 1;
}

message RunFlowgraphResponse {
  // Block ID to which this response belongs
  string block_id = 1;

  // Serialized arbitrary PMT (GNURadio Polymorphic Message Type)
  bytes payload = 2;
}

// Complex number
message Complex {
  // Real part of the complex number
  double real_value = 1;

  // Imaginary part of the complex number
  double imaginary_value = 2;
}

// Complex 32 number
message Complex32 {
  // Real part
  float real_value = 1;

  // Imaginary part
  float imaginary_value = 2;
}

// GNURadio parameter values
message Value {
  oneof val {
    // Represents a string value
    string string_value = 1;

    // Represents an integer
    int32 integer_value = 2;

    // Represents a long integer
    int64 long_value = 3;

    // Represents a float
    double float_value = 4;

    // Represents a complex number
    Complex complex_value = 5;
  }
}

// The GNURadio process manager service definition.
service Starcoder {
  // Runs a flowgraph and streams back
  rpc RunFlowgraph (stream RunFlowgraphRequest) returns (stream RunFlowgraphResponse) {}
}

/*
 * Starcoder - a server to read/write data from/to the stars, written in Go.
 * Copyright (C) 2018 InfoStellar, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
syntax = "proto3";

package starcoder;

option go_package = "/api";

message RunFlowgraphRequest {
  // Filename of GNURadio script to run
  string filename = 1;

  // Key value pair representing a parameter to be passed to the script
  message Parameter {
    // Name of parameter
    string key = 1;

    // Value to assign the parameter
    Value value = 2;
  }

  // Arbitrary command line parameters to be passed to the GNURadio script
  repeated Parameter parameters = 2;

  // Blocks to stream back in the response
  repeated string block_id = 3;

  // PMT command to send to a block
  Command command = 4;
}

// Command message sent to the flowgraph. This only works with the custom
// Starcoder block for sending PMTs.
message Command {
  // Block ID to send the command message to.
  string block_id = 1;

  PMT pmt = 2;
}

// Protobuf format of GNURadio PMT (Polymorphic Message Type)
message PMT {
  oneof pmt_oneof {
    bool boolean_value = 1;

    string symbol_value = 2;

    int64 integer_value = 3;

    double double_value = 4;

    Complex complex_value = 5;

    PMTPair pmt_pair_value = 6;

    PMTTuple pmt_tuple_value = 7;

    PMTVector pmt_vector_value = 8;

    PMTUniformVector pmt_uniform_vector_value = 9;

    PMTDict pmt_dict_value = 10;
  }
}

// Protobuf format of a PMT pair. The `car` and `cdr` variable names are defined by
// GNURadio.
message PMTPair {
  // First object of the pair
  PMT car = 1;

  // Second object of the pair
  PMT cdr = 2;
}

// Protobuf format of a PMT tuple.
message PMTTuple {
  repeated PMT pmt = 1;
}

// Protobuf format of a PMT dictionary.
message PMTDict {
  // Key value pair representing entry in PMT dictionary
  message Entry {
    // Key
    PMT key = 1;

    // Value assigned to key
    PMT value = 2;
  }

  repeated Entry entries = 1;
}

// Protobuf format of a PMT Vector
message PMTVector {
  repeated PMT pmt = 1;
}

// Protobuf format of a PMT Uniform Vector
message PMTUniformVector {
  oneof pmt_uniform_vector_oneof {
    PMTU8Vector u8_value = 1;

    PMTI8Vector i8_value = 2;

    PMTU16Vector u16_value = 3;

    PMTI16Vector i16_value = 4;

    PMTU32Vector u32_value = 5;

    PMTI32Vector i32_value = 6;

    PMTU64Vector u64_value = 7;

    PMTI64Vector i64_value = 8;

    PMTF32Vector f32_value = 9;

    PMTF64Vector f64_value = 10;

    PMTC32Vector c32_value = 11;

    PMTC64Vector c64_value = 12;
  }
}

// Protobuf format of a PMT Uint8 Vector
message PMTU8Vector {
  bytes payload = 1;
}

// Protobuf format of a PMT Int8 Vector
message PMTI8Vector {
  repeated sint32 payload = 1;
}

// Protobuf format of a PMT Uint16 Vector
message PMTU16Vector {
  repeated uint32 payload = 1;
}

// Protobuf format of a PMT Int16 Vector
message PMTI16Vector {
  repeated sint32 payload = 1;
}

// Protobuf format of a PMT Uint32 Vector
message PMTU32Vector {
  repeated uint32 payload = 1;
}

// Protobuf format of a PMT Int32 Vector
message PMTI32Vector {
  repeated sint32 payload = 1;
}

// Protobuf format of a PMT Uint64 Vector
message PMTU64Vector {
  repeated uint64 payload = 1;
}

// Protobuf format of a PMT Int64 Vector
message PMTI64Vector {
  repeated sint64 payload = 1;
}

// Protobuf format of a PMT Float32 Vector
message PMTF32Vector {
  repeated float payload = 1;
}

// Protobuf format of a PMT Float64 Vector
message PMTF64Vector {
  repeated double payload = 1;
}

// Protobuf format of a PMT Complex32 Vector
message PMTC32Vector {
  repeated Complex32 payload = 1;
}

// Protobuf format of a PMT Complex64 Vector
message PMTC64Vector {
  repeated Complex payload = 1;
}

message RunFlowgraphResponse {
  // Block ID to which this response belongs
  string block_id = 1;

  // Serialized arbitrary PMT (GNURadio Polymorphic Message Type)
  bytes payload = 2;
}

// Complex number
message Complex {
  // Real part of the complex number
  double real_value = 1;

  // Imaginary part of the complex number
  double imaginary_value = 2;
}

// Complex 32 number
message Complex32 {
  // Real part
  float real_value = 1;

  // Imaginary part
  float imaginary_value = 2;
}

// GNURadio parameter values
message Value {
  oneof val {
    // Represents a string value
    string string_value = 1;

    // Represents an integer
    int32 integer_value = 2;

    // Represents a long integer
    int64 long_value = 3;

    // Represents a float
    double float_value = 4;

    // Represents a complex number
    Complex complex_value = 5;
  }
}

// The GNURadio process manager service definition.
service Starcoder {
  // Runs a flowgraph and streams back
  rpc RunFlowgraph (stream RunFlowgraphRequest) returns (stream RunFlowgraphResponse) {}
}
